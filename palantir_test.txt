def co_ordinate(arr,j,k):
    if(highlands(arr,j,k,j+1,k) and
    highlands(arr,j,k,j-1,k) and
    highlands(arr,j,k,j,k+1) and
    highlands(arr,j,k,j,k-1) and
    highlands(arr,j,k,j+1,k+1) and
    highlands(arr,j,k,j+1,k-1) and
    highlands(arr,j,k,j-1,k+1) and
    highlands(arr,j,k,j-1,k-1)):
        return 1
    return 0
    
    """n=arr[j][k]
    if len(arr)==1:
        if j==0 and arr[0][1]>=arr[0][0]: return 0
        elif k==len(arr[0]-1) and arr[0][len(arr[0])-2]>=arr[0][len(arr[0]-1)]: return 0
        elif arr[j][k-1]>=n or arr[j][k+1]>=n: return 0
    if j==0 and k==0:
        if arr[0][1]>=n or arr[1][0]>=n or arr[1][1]>=n: return 0 #top left
    elif j==0 and k==len(arr[0])-1:
        if arr[0][len(arr[0])-2]>=n or arr[1][len(arr[0])-1]>=n or arr[1][len(arr[0])-2]>=n: return 0 #top right
    elif j==len(arr)-1 and k==0:
        if arr[len(arr)-2][0]>=n or arr[len(arr)-1][1]>=n or arr[len(arr)-2][1]>=n: return 0  #bottom left
    elif j==len(arr)-1 and k==len(arr[0])-1:
        if arr[len(arr)-1][len(arr[0])-2]>=n or arr[len(arr)-2][len(arr[0])-2]>=n or arr[len(arr)-2][len(arr[0])-1]>=n: return 0 #bottom right
    elif k==0:
        if arr[j-1][k]>=n or arr[j+1][k]>=n or arr[j][k+1]>=n or arr[j-1][k+1]>=n or arr[j+1][k+1]>=n: return 0 #first column
    elif k==len(arr[0])-1:
        if arr[j-1][k]>=n or arr[j+1][k]>=n or arr[j][k-1]>=n or arr[j-1][k-1]>=n or arr[j+1][k-1]>=n: return 0 #last column
    elif j==0:
        if  arr[j][k-1]>=n or arr[j][k+1]>=n or arr[j+1][k]>=n or arr[j+1][k-1]>=n or arr[j+1][k+1]>=n: return 0 #first row
    elif j==len(arr)-1:
        if  arr[j][k-1]>=n or arr[j-1][k-1]>=n or arr[j-1][k]>=n or arr[j-1][k+1]>=n or arr[j][k+1]>=n: return 0 #last row
    elif arr[j-1][k]>=n or arr[j+1][k]>=n or arr[j][k+1]>=n or arr[j][k-1]>=n or arr[j-1][k-1]>=n or arr[j-1][k+1]>=n or arr[j+1][k-1]>=n or arr[j+1][k+1]>=n: return 0
    return 1"""

def highlands(arr,j,k,r,c):
    if (r>=0 and r<len(arr) and c>=0 and c<len(arr[0])):
        if arr[j][k]>arr[r][c]:
            return True
        return False


def get_neigbhours(arr,j,k):
    if j==0 and k==0: #top left
        return set([(0,1),(1,0),(1,1)])
    elif j==0 and k==len(arr[0])-1: #top right
        return set([(0,len(arr[0])-2),(1,len(arr[0])-1),(1,len(arr[0])-2)])
    elif j==len(arr)-1 and k==0: #bottom left
        return  set([(len(arr)-2,0),(len(arr)-1,1),(len(arr)-2,1)])
    elif j==len(arr)-1 and k==len(arr[0])-1: #bottom right
        return set([(len(arr)-1,len(arr[0])-2),(len(arr)-2,len(arr[0])-2),(len(arr)-2,len(arr[0])-1)])
    else:
        if k==0: #first column
            return  set([(j-1,k),(j+1,k),(j,k+1),(j-1,k+1),(j+1,k+1)])
        elif k==len(arr[0])-1: #last column
            return set([(j-1,k),(j+1,k),(j,k-1),(j-1,k-1),(j+1,k-1)])
        elif j==0: #first row
            return set([(j,k-1),(j,k+1),(j+1,k),(j+1,k-1),(j+1,k+1)])
        elif j==len(arr)-1: #last row
            return set([(j,k-1),(j-1,k-1),(j-1,k),(j-1,k+1),(j,k+1)])
        else:
            return set([(j-1,k),(j+1,k),(j,k+1),(j,k-1),(j-1,k-1),(j-1,k+1),(j+1,k-1),(j+1,k+1)])
    
arr=[[1,2,1,3,4],[1,5,2,2,2],[4,5,1,9,7],[3,5,3,7,6],[4,3,1,7,3]]
arr1=[[1,1,1,1,1],[1,2,2,2,1],[1,2,3,2,1],[1,2,2,2,1],[1,1,1,1,1],[1,1,1,1,3]]
p=[]
hp=[]
graph={}
for j in range(len(arr)):
    l=[]
    for k in range(len(arr[0])):
        l.append(co_ordinate(arr,j,k))
        if co_ordinate(arr,j,k) == 1:
            hp.append((j,k))
        graph[(j,k)] = get_neigbhours(arr,j,k)
    p.append(l)
print(graph)

def bfs(graph,start,arr):
    visited=set()
    queue = start

    while queue:
        vertex= queue.pop(0)
        if vertex not in visited:
            visited.add(vertex)
            queue.extend(graph[vertex]-visited)
    return visited
    
print(bfs(graph,[(0,0)],arr))
